TOPICS 
--------
-Introduction
  .What is an algorithm
  .What is a program 
  .Aplication, the study of algorithms,  importance of analyzing algorthim,
  .Complexity, RAM model,
  .Why study algorithms
  .Performance efficiency comparison  of two algorithms
  .Methods of proof
  .Algorithm analysis
  .Algorithm analysis
  .Asymptotic and notation
  .function of grrowth rate
  .estimate running time
  .Big-oh notation
  .Big-oh Theorems
  .Asymptomatic notations properties
  .Manipulating  asymptotics notation
  .determining complexities in general 
  .growth rate examples
  .primitive operations
  .counting primitive operations
-Recursion
  .recurrence relations
  .recurrence equations
  .solving recurrences
  .master theorem performance
-Sorting
   .Properties of sorting algorithms
   .bubble sorting 
   .insertion sorting 
   .selection sorting
   .shell sort
   .Heap sort
   .merge sort
   .Quick sort
   .counting sorting
   .radix sort
   .Bucket sort
-Greedy algorithm
   .Definitions 
   .a simple greedy algorithms
   .knapsack problem
   .huffman  code
-Spanning Tree
   .Minimum spanning tree
   .kruskal's algorithms
   .prims algorithms
   .Dijkstra's algorithms
-Dynamic programming 
    .matrix chain maltiplication
    .Longest commo subsequence
    .applications
-Graph algorithms
    .Definitions
    .Adjacency matrix
    .Adjacency list
    .breadth first search
    .depth first search 
    .topological sort
    .strong connected components
    .applications
-Binary search tree
   .Implementations
   .inorder tree walk
   .preorder  tree  walks
   .postorder tree walks
   
Algorithms
------------------
-Sequence of steps to solve a probems.
-steps of  operations to solve a problem performing 
-efficient method that can be expressed within finite amount of time and space.
-Represent the solution of a particular problem in a very simple and efficient way.
independent from any programming language.


Algorith design
-------------------
-Its important aspects includes:
     creating an efficient algorithms to solve a problem in an efficient way using 
     minimum time and space.
-for an algorithm to run in lesser time, we have to inverst in more memory .
-For the case of less memory, we need to have more time.

Steps involved in solvling computational problem
-------------------------------------------------
-problem definition
-development of a model
-specification of an algorithm
-designing an algorithm
-checking the correctness of an algorithm
-analysis of an algorithm
-implementation of an algorithmprogram testing
-documentation



-Design and analysis of algorithms
-----------------------------------
-very improtant for designing algorithm
-solve different types of problems in the branch of computer science and information 
technology.
-

   
   Purpose
   ---------
   .Algorithm are the heart of computer science.
   .their essential nature is to  automate some aspect of the collecting, organizing  and processing of information.
   .enable making of sense of infiormation to manage, organize and search it, and to use it for practical purposes.
   .efficient algorithm enhances fasteness, little memory and provide guarantees on their performance.
  
   
    Introduction
    -------------
    .Algorithms - rules to be followed in problem solving  operations.
                - finite sequence of well-defined, computer implimentatable instructions, typecally  to solve a class of problems or to perform computations.
                - Are always unambiguous.
                - Used as specifications for performing calculations, data processing, automated reasoning.
                - As an effective method , it can be expressed within a finite amount of space and time and in a
                   well-defined formal language for calculating  a function.
                -sequence of well defined computer  implementable instructions.
                -solves  a class of problems or to perform computations.
                -well-defined computational procedure that takes some values as input and produces some values as output.
                -not dependent not a particular programming language, machine, system or compiler.
                -They are mathematical entities, which can be though of as running on some sort
                  of idealized computer with an ifinite randoem access memory and unlimited word size.
                -algorithm design is all about the mathematical theory behind the design of good programs.
                -Are mathematical objects.
   algorithm's efficiency - is a function of the amount of computational resource it rquires, measured typically as 
   execution time and the amount of space, or memory, that the algorithm uses.
   three thinks you require to present an algorithm -
                     - present a clear, simple and unambiquos description of the algorithm.
                     -present a justification or proof of the algorithm's correctness.
                     -present a worst case analysis of the algorithm efficiency.

algorithm analysis - the basic element includes:
                                              -asymptotics
                                              -summation
                                              -recurrences.
             asymptotics 
                -involves O-notation(big-oh) and its many relatives Ω, Θ, o (“little-Oh”), ω
                -provides us with a way to simpliffy the functions that arise in analyzing  
                algorithm running  times by ignoring constant factors and concentrating on the trends for  large values of n.
                - ignore constant factors - multiplicative constants are ignored for example, 347n is Θ(n).
                -constant factors appearing exponents cannot be ignored for example, 23n is not O(2n).
  programs - collection of instructions that can be executed by the computer to perform specific task.
           - written by a programer in a programming language.
           - may be executed with the aid of an interpreter.
           -collection of computer programs, libraries and related data are referred to as software.
Why study algorithm - programming is a complex task. 
                    - programming projects involves storing and accessing large quantities of data efficiently.
                    - many programming projects involves solving compex computational problems for  which simplistic or naive solutions may not be efficient enough.
                    -the complexity may involves numerical data where the topic of algorithms and analysis is important.
                    

 General approaches to algorithm design
               -

Consider the graph shown below.


prims-algorithm-questions-answers-q7


Which of the following edges form the MST of the given graph using Prim’a algorithm, starting from vertex 4.           (1 Mark)
Select one:
 (4-3)(3-2)(2-1)(1-5)
(4-3)(5-3)(2-3)(1-2)
(4-3)(3-5)(5-2)(1-5)
 (4-3)(3-5)(5-1)(1-2)

https://www.sanfoundry.com/fractional-knapsack-problem-multiple-choice-questions-answers-mcqs/

Huffman coding 
-------------------
-Can efficiently encode data.
-widely used and banaficial tchnique for compressing data.
-Huffmans' greed algorithms used a table of the frquenciec of occurrence  of each character to build up an 
optimal wat
-prefix codes
-coddes(bit sequences) are assigned such a way that the code assigned to one character is not the prefix.
 to any other character.
 -Ensure that the is no ambiguity when decoding the generated bitstream.
 -The two major  parts in huffman coding 
               Building a huffman tree from inout characters
               Traverse the huffman tree and assign codes to characters.
               
               Steps for build Huffman tree
               ------------------------------
-Input iss an array of unique characters along with their frequency of occurrence and output is 
huffman tree.
-Create a leaf node for each unique character and build a min heap of all leaf nodes
(min heap is used as priority queue)
-Extract two nodes with the minimum frequence from the min heap
-Create a new internal node with a fequency equal to the sum of the two nodes frequencies
-Repeat step # 2 and # 3 until the heap contains only one node. the remaining node is the root node and the tree is complete.


Huffman Decoding
--------------------
-Used to decode the encoded data .
-We iterate through the binary encoding data.
-steps used to find character corresponding to current bits
         -We start from root and do following unit a leaf is found.
         -If current bit is 0, we move to the left node of the tree.
         -If the bit is 1 we move to right node of the tree
         -If during traversal, we encounter a leaf node, print character of that 
         particular leaf node and then again continue the iteration of the encode data 
         starting from step1
        
        
        Kruskal's algorithm
        --------------------
        -Algorithm in graph theory that finds a minimum spanning tree
         for a connected  weighted graph.
        -finds a subset of the edges that forms a tree that includes every vertex,
        -Total weight of all the edges in the tree is minimized.
        -If the graph is not connected, then it finds a minimum spanning forest
        (minimum spanning tree  for each connected component)
        -It is an example of greedy algorithm.
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

Chapter 4
-----------
Matrix-chain multiplication
---------------------------------
->Let A be an n by m matrix, let B be an m by p matrix, 
 then c=AB is an n by p matrix
->c=AB can be computed in O(nmp) time, using traditional matrix multiplication.
->suppose i want to compute A1A2A3A4
->matrix multiplication is associative, so I can do the 
 multiplication in several different order
 
 Example:
 --------
 A1 is 10 by 100 matrix
 A2 is 100 by 5 matrix
 A3 is 5 by 50 matrix
 a4 is 50 by 1 matrix
 A1A2A3A4 is a 10 by 1 matrix
 
 ->5 different orderings = 5 different parenthesizations 
   (A1(A2(A3A4)))
   ((A1A2)(A3A4))
   (((A1A2)A3)A4)
   ((A1(A2A3))A4)
   (A1((A2A3)A4))
 ->Each paranthesization is a different number of mults
 let A ij = A i · · · A j
 
 
 Example
 -------------
 ->A1 is 10 by 100 matrix, 
 ->A2 is 100 b 5 matrix ,
 ->A3 is by 50 matrix, 
 ->A4 is 50 matrix
 ->A1A2A3A4 is a 10 by 1 matrix
 -(A1(A2(A3A4)
   A34 = A3A4, 250 mults, result is 5 by 1
   A24=A2A34, 500 mults, result is 100 by 1
   A14
   
 
 



















Binary search tree(BST)
-------------------------
->Hierarchical data structure with a single pointer to root node.
->Each node has at most two nodes(left and right)
->Each node is ordered by some key data field(s)
->For every node in the tree, its key is greater than its left  child's key and less than its right child's key.


Some BST Terminology
--------------------
->the root node is the top node in the hierarchy
->A child node has exactly one parent node, 
->A parent node has at most two child nodes, sibling nodes share the same parent node
->Every node in the BST is a subtree of the BST rooted at that node.


implementing a search tree
--------------------------
       struct_bst_node {
             int data;
             struct bst_node *left;
             struct bst_node * right;
             };
             typedef struct bst_node ;


->left hold the address of the left child.
->Right  holds the address of the left child
 ->all BST nodes can be accessed through root pointer b traversing left and right bst_node pointer


OPerations on BST
---------------------------
->Natural recursive
 .Each node in the BST is itself a BST
->Some operations:
      -create a BST
      -find node in BST using its key field
      -add a node to the BST
      -Traverse the BST
       vist all the nodes in some order

 
 Creating a BST
 ------------------
    /* a function that creates, initialize, and returns  a new bst_node
    bst_node *createANode(int val){
    bst_node *newnode;
    
    newnode = malloc(sizeof(bst_node);
    if (newnode == NULL){
    return Null;
    }
    
    newnode->data = val;
    newnode->right = newnode -> left = null;
    return newnode;
    }
    bst_node *root = NULL;// an empty BST
    root = CreateANode(35);// a BST w/one node
    if(root != NULL){  //add the left child
    root-> left = CreateANode(22);
    
    
    Finding a Node into the BST
    ----------------------------
    -Use  the search key to direct a recursive binary
    -search for a matching node
      .start at the root node as current node
      .if the search keys' value matches the current node's key then found a match
      .if search key's value is greater than current node's 
               .if the current node has a right  child, search right
               .Else, no matching node in the tree
      .If search key is less than the current node's 
               .If the current node has a left child, search  left
               .Else, no matching node in the tree
     


  Example: Search for 45 in the tree
  -------------------------------------
  ->Start at the root, 45 is greater than 25, search in right subtree
  ->45 is less than 50, search in 50's left subtree
  ->45 is greater than 35, search is 35's right subtree
  ->45 is greater  than 44, but 44 has no  right subtree so 45 is not in the BST


Insert Node into the BST
--------------------------------
->Always insert new node as leaf node
->Start at root node as current node
->if new node's key > current's key 
    .If current node has a left child, search left
    .Else add new node as current's left child


Example: insert 60 in the tree
------------------------------------------
->Start at the root,  60 is greater than 25, search in right subtree
->60 is greater than 50, search in 50's right subtree
->60  is less than 70, search in 70's left subtree
->60 is less than 66, add 60 as 66 left child





Traversals
--------------------
-Visit ever node in the tree and perform some operation on it
    (ex) print out  the data field of each node
-Three steps to a traversal 
    .visit the current node
    .Traverse its left subtree
    .Traverse its right subtree
-The order in which you perform these steps results  in different traversal orders:
     .Pre-order traversal :(1)(2)(3)
     .In-order traversal (2)(1)(3)
     post-order traversal: (2) (3) (1)



Traversal Code
-------------------
/*recurse version of in-order traversal 
*the iterative version is ugly
*/
void InOrder(bst_node *root){
if(root == NULL){
return;
}
InOrder(root->left);//traverse left subtree
Visit(root);
InOrder(root->right);
}
//in main: a call to InOrder passing root
InOrder(root);
//The call stack after the first few
//recursive calls to InOrder(root->left)



Traveral Examples
---------------------
->InOrder(root) visits nodes in the following order:
  4,10,12,15,18,22,24,25,31,35,44,50,66,70,90...
->A pre-order traversal visits nodes  in the following order;
 25,15,10,4,12,22,18,24,50,35,31,44,70,66,90
 ->A post-order traversal visits nodes in the following order:
  4,12,18,24,22,15,31,44,35,66,90,70,50,25



Balance search tree
--------------------------
->A search-tree data structure for which  a height of O(lg n) is 
  guaranted when implementing a dynamic set of n items.
   Examples:
    AVL trees
    2-3 trees
    2-3.4 trees
    B-trees

    Red-black trees
    Height of a red-black tree
    Rotations
    insertion

Red-black properties
----------------------
->Every node is either red or black.
->The root and leave(NIL's) are black.
->If a node is red, then its parent is black.
->All simple path from any node x to a descendant
leaf have the same number of back nodes = black-heigh(x)


Height of a red-black tree
----------------------------
->Theorem. A red-black tree with  n keys has height h ≤ 2 lg(n + 1)
->Merge red noddes into  their back parents 
  this process produces a tree in which each node has 2,3,  or 4 children.
  the 2-3-4 tree has uniform depth h' of leaves.
->We have h' ≥ h/2 since at most half the leave on an path are red.
->The number of leaves in each tree is 
   n+1
   n+1 ≥ 2 h'
   lg(n+1)≥ h' ≥ h/2
   h ≤ 2 lg(n + 1)
 
 
 Query operations 
 -------------------
 -Corallary - the queries search, MIN, MAX, SUCCESSOR, and PREDECESSOR all run in 
O(lg n) time on a red-black  tree with n nodes.


Modifying operations
--------------------
->The operations INSERT and DELETE cause modification to the red-black tree:
  the operation itself, 
  color changes
  restructuring the links of the tree via "rotations"
  
->Rotations maintains the inorder  of keys:
 a ∈ α, b ∈ β, c ∈ γ ⇒ a ≤ A ≤ b ≤ B ≤ c.
 ->A rotation can be performed in o(1) times


insertion into a red-black tree
-----------------------------------
->insert x in tree.
 color x red
 only red-black property 3 might be violated 
 move the violation up the tree by recoloring unit it can 
 be fixed with rotations and recoloring 
 
 Example
 ---------
 Insert x = 15
 recolor, moving the violation up the tree.
 Right-rotate(18) 
 LEFT-ROTATE(7) and recolor.
















